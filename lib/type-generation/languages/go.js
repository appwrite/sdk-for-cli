/** @typedef {import('../attribute').Attribute} Attribute */
const { AttributeType } = require('../attribute');
const { LanguageMeta } = require("./language");

class Go extends LanguageMeta {
    getType(attribute, collections) {
        let type = "";
        switch (attribute.type) {
            case AttributeType.STRING:
            case AttributeType.EMAIL:
            case AttributeType.DATETIME:
            case AttributeType.IP:
            case AttributeType.URL:
                type = "string";
                if (attribute.format === AttributeType.ENUM) {
                    type = LanguageMeta.toPascalCase(attribute.key);
                }
                break;
            case AttributeType.INTEGER:
                type = "int";
                break;
            case AttributeType.FLOAT:
                type = "float64";
                break;
            case AttributeType.BOOLEAN:
                type = "bool";
                break;
            case AttributeType.RELATIONSHIP:
                const relatedCollection = collections.find(c => c.$id === attribute.relatedCollection);
                if (!relatedCollection) {
                    throw new Error(`Related collection with ID '${attribute.relatedCollection}' not found.`);
                }
                type = LanguageMeta.toPascalCase(relatedCollection.name);
                if ((attribute.relationType === 'oneToMany' && attribute.side === 'parent') || (attribute.relationType === 'manyToOne' && attribute.side === 'child') || attribute.relationType === 'manyToMany') {
                    type = `[]${type}`;
                }
                break;
            default:
                throw new Error(`Unknown attribute type: ${attribute.type}`);
        }
        if (attribute.array) {
            type = "[]" + type;
        }
        if (!attribute.required && attribute.default === null) {
            type = "*" + type;
        }
        return type;
    }

    getTemplate() {
        return `package models

/**
 * This file is auto-generated by the Appwrite CLI. 
 * You can regenerate it by running \`appwrite ${process.argv.slice(2).join(' ')}\`.
 */

<% for (const attribute of collection.attributes) { -%>
<% if (attribute.format === 'enum') { -%>
type <%- toPascalCase(attribute.key) %> string

const (
<% for (const [index, element] of Object.entries(attribute.elements)) { -%>
	<%- toPascalCase(attribute.key) %><%- toPascalCase(element) %> <%- toPascalCase(attribute.key) %> = "<%- element %>"
<% } -%>
)

<% } -%>
<% } -%>
type <%- toPascalCase(collection.name) %> struct {
<% for (const attribute of collection.attributes) { -%>
	<%- toPascalCase(attribute.key) %> <%- getType(attribute, collections) %> \`json:"<%- attribute.key %>"\`
<% } -%>
}
`;
    }

    getFileName(collection) {
        return LanguageMeta.toSnakeCase(collection.name) + ".go";
    }
}

module.exports = { Go };
